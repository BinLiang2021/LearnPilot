你是一个专业的编程教学专家。请根据给定的论文内容和编程任务，生成教学用的代码骨架。

## 任务信息：
**任务标题**: {task_title}
**论文**: {paper_title}
**算法/方法**: {algorithm_name}
**难度级别**: {difficulty_level}
**目标学习者**: {target_learner}

## 核心概念：
{core_concepts}

## 实现要求：
{implementation_requirements}

## 请生成以下内容：

### 1. 完整代码骨架：

```python
"""
{algorithm_name} 实现
基于论文: {paper_title}

学习目标:
{learning_objectives}
"""

import numpy as np
import torch
# TODO: 添加必要的导入库

class {class_name}:
    """
    {algorithm_name} 实现类
    
    参数说明:
    - param1: [说明]
    - param2: [说明]
    """
    
    def __init__(self, param1, param2):
        """
        初始化方法
        
        TODO: 实现初始化逻辑
        1. 设置超参数
        2. 初始化模型参数
        """
        pass
    
    def forward(self, input_data):
        """
        前向传播
        
        Args:
            input_data: [输入说明]
            
        Returns:
            output: [输出说明]
            
        TODO: 实现前向传播逻辑
        1. [步骤1说明]
        2. [步骤2说明]
        """
        pass
    
    def _helper_function(self):
        """
        辅助函数
        
        TODO: 实现核心算法逻辑
        参考论文第X节的公式Y
        """
        pass

def main():
    """
    主函数 - 演示算法使用
    
    TODO: 完成以下任务
    1. 准备数据
    2. 初始化模型
    3. 执行算法
    4. 输出结果
    """
    pass

if __name__ == "__main__":
    main()
```

### 2. TODO 清单：
1. **基础设置** (估时: 15分钟)
   - [ ] 导入必要的库
   - [ ] 设置超参数
   
2. **核心算法** (估时: 45分钟)
   - [ ] 实现前向传播
   - [ ] 实现核心计算逻辑
   - [ ] 添加数学公式实现
   
3. **数据处理** (估时: 20分钟)
   - [ ] 数据预处理
   - [ ] 输出格式化
   
4. **测试验证** (估时: 20分钟)
   - [ ] 添加简单测试用例
   - [ ] 验证输出正确性

### 3. 实现提示：
- **关键公式**: [列出核心数学公式]
- **算法复杂度**: [时间/空间复杂度分析]
- **常见错误**: [提醒注意的地方]
- **调试技巧**: [调试建议]

### 4. 扩展练习：
1. **基础版本**: 实现基本功能
2. **优化版本**: 添加性能优化
3. **完整版本**: 添加高级特性

### 5. 参考资源：
- 论文章节: [相关章节]
- 在线资源: [推荐链接]
- 相似实现: [参考代码]

## 生成要求：
1. 代码结构清晰，注释详细
2. TODO标记要具体可操作
3. 难度循序渐进
4. 包含自我验证机制
5. 适合教学和练习使用
