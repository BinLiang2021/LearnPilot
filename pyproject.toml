[project]
name = "learnpilot"
version = "2.0.0"
description = "AI-driven research paper learning assistant"
authors = [
    {name = "LearnPilot Team", email = "team@learnpilot.ai"}
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = ["ai", "research", "learning", "papers", "education"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core FastAPI and web
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    
    # Authentication
    "pyjwt>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    
    # AI and ML
    "openai>=1.3.0",
    "openai-agents>=0.0.3",
    "tiktoken>=0.5.1",
    "numpy>=1.24.0",
    "networkx>=3.0",
    "faiss-cpu>=1.7.4",
    
    # Document processing
    "marker-pdf>=0.2.0",
    "python-docx>=0.8.11",
    "pypdf2>=3.0.0",
    
    # Data and utilities
    "aiohttp>=3.9.0",
    "aiofiles>=23.0.0",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "tabulate>=0.9.0",
    
    # Scientific and research
    "arxiv>=2.0.0",
    "feedparser>=6.0.10",
    
    # Jupyter support
    "jupyter>=1.0.0",
    "ipython>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
]

test = [
    "httpx>=0.25.0",
    "pytest-mock>=3.11.0",
    "factory-boy>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/learnpilot/learnpilot"
Repository = "https://github.com/learnpilot/learnpilot.git"
Documentation = "https://learnpilot.readthedocs.io"
"Bug Tracker" = "https://github.com/learnpilot/learnpilot/issues"

[project.scripts]
learnpilot = "src.learn_pilot.cli:main"
learnpilot-web = "src.learn_pilot.web.main:start_server"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/learn_pilot"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["learn_pilot"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "marker.*",
    "arxiv.*",
    "feedparser.*",
    "faiss.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src/learn_pilot",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/learn_pilot"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]